services:
  backend:
    image: ghcr.io/ignorancio/spring-backend:latest #or use build: ./
    restart: unless-stopped
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      DB_URL: ${DB_URL}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      CACHE_URL: ${CACHE_URL}
      CACHE_PORT: ${CACHE_PORT}
      TEMPO_URL: ${TEMPO_URL}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring-network
    volumes:
      - ./public:/app/public
      - ./logs:/app/logs
  database:
    image: postgres:17.4
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring-network
    volumes:
      - database-volume:/var/lib/postgresql/data
  redis:
    image: redis:8.0-M04-alpine3.21
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - spring-network
  tempo:
    image: grafana/tempo:latest
    restart: unless-stopped
    command: -config.file=/etc/tempo.yml
    volumes:
      - ./docker-config/tempo/tempo.yml:/etc/tempo.yml
      - tempo-data:/var/tempo
    networks:
      - spring-network
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - spring-network
  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/app
      - ./docker-config/promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - spring-network
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - spring-network
  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./docker-config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - spring-network
networks:
  spring-network:
    driver: bridge
volumes:
  database-volume:
  grafana-storage:
  tempo-data:
  loki-data:
  prometheus-data: