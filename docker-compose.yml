services:
  backend:
    build: ./
    restart: unless-stopped
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      DB_URL: jdbc:postgresql://database:5432/springdb
      DB_USER: postgres
      DB_PASSWORD: postgres
      CACHE_URL: redis
      CACHE_PORT: 6379
      ELASTIC_URL: http://elasticsearch:9200
      ELASTIC_USER: elastic
      ELASTIC_PASSWORD: changeme
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring-network
  database:
    image: postgres:latest
    restart: unless-stopped
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: springdb
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d springdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
        - spring-network
    volumes:
        - database-volume:/var/lib/postgresql/data
  redis:
    image: redis:8.0-M04-alpine3.21
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      spring-network:
  elasticsearch:
    image: elasticsearch:8.17.3
    restart: unless-stopped
    environment:
      - cluster.name=prod_cluster
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=changeme
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
    healthcheck:
      test: [ "CMD-SHELL", "curl -u elastic:changeme -X GET http://localhost:9200/_cluster/health?pretty" ]
      interval: 15s
      timeout: 15s
      retries: 20
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - spring-network
networks:
  spring-network:
    driver: bridge
volumes:
    database-volume: